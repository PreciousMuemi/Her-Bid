import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { supabase } from '../../lib/supabase';ON_KEY;
import EnvCheck from './EnvCheck';
  console.log('üîç Environment Check Component:');
const DatabaseDebug = () => {
  const [connectionStatus, setConnectionStatus] = useState(null);
  const [tableStatus, setTableStatus] = useState(null);
  const [businesses, setBusinesses] = useState([]);
  const [contracts, setContracts] = useState([]);
  const [loading, setLoading] = useState(false);der-yellow-400 rounded">
  const [debugInfo, setDebugInfo] = useState(null);es Check</h3>
      <div className="mt-2 space-y-1 text-sm">
  const testConnection = async () => {</div>
    setLoading(true);th: {key?.length || 'NOT FOUND'}</div>
    console.log('üîç Starting comprehensive connection test...');'NOT FOUND'}</div>
      </div>
    try {>
      // First test environment variables
      const envTest = testEnvironmentVariables();
      console.log('Environment test result:', envTest);
       default EnvCheck;      if (!envTest.valid) {        setConnectionStatus({          success: false,          error: 'Environment variables are invalid',          details: envTest        });        setLoading(false);        return;      }            // Try with hardcoded test client first      const testClient = createTestSupabaseClient();      if (testClient) {        console.log('Testing with hardcoded client...');        const { data: testData, error: testError } = await testClient          .from('profiles')          .select('count')          .limit(1);                if (testError) {          console.error('Test client failed:', testError);        } else {          console.log('Test client succeeded:', testData);        }      }            // Now test with the regular client      console.log('Testing with environment client...');      const { data, error } = await supabase        .from('profiles')        .select('count')        .limit(1);            if (error) {        console.error('Connection error:', error);        setConnectionStatus({          success: false,          error: error.message,          details: {            code: error.code,            hint: error.hint,            message: error.message,            envTest: envTest          }        });      } else {        console.log('‚úÖ Connection successful!');        setConnectionStatus({          success: true,          data,          message: 'Connected to Supabase successfully!'        });      }          } catch (err) {      console.error('Connection test failed:', err);      setConnectionStatus({        success: false,        error: err.message,        type: 'exception'      });    }        setLoading(false);  };  const checkAllTables = async () => {    setLoading(true);    try {      const tables = ['profiles', 'businesses', 'contracts', 'partnerships', 'skills'];      const results = {};            for (const table of tables) {        try {          console.log(`Testing table: ${table}`);          const { data, error } = await supabase.from(table).select('*').limit(1);          results[table] = {             exists: !error,             error: error?.message,            details: error?.details || null          };        } catch (err) {          results[table] = { exists: false, error: err.message, type: 'exception' };        }      }            setTableStatus(results);    } catch (err) {      console.error('Table check failed:', err);      setTableStatus({ error: err.message });    }    setLoading(false);  };  const setupDatabase = async () => {    setLoading(true);    console.log('üöÄ Setting up GigeBid Database...');    try {      const sampleBusiness = {        id: 'biz-test-001',        name: 'Tech Solutions Pro',        owner_name: 'Alex Johnson',        industry: 'Technology',        location: 'Nairobi',        description: 'Professional web development services',        skills: ['Web Development', 'UI/UX Design'],        reputation_score: 4.8,        created_at: new Date().toISOString()      };            console.log('Attempting to insert test business...');      const { data: businessData, error: businessError } = await supabase        .from('businesses')        .upsert([sampleBusiness])        .select();            if (businessError) {        console.error('Business insert error:', businessError);        setDebugInfo({           success: false,           error: businessError.message,          code: businessError.code,          suggestion: 'You may need to create the tables manually in Supabase SQL editor'        });      } else {        console.log('‚úÖ Business inserted successfully!');        setDebugInfo({           success: true,           message: 'Database setup successful!',          data: businessData        });      }            await fetchData();          } catch (error) {      console.error('üí• Database setup failed:', error);      setDebugInfo({         success: false,         error: error.message,        type: 'setup_error'      });    }        setLoading(false);  };  const fetchData = async () => {    try {      console.log('Fetching existing data...');            const { data: businessData, error: businessError } = await supabase        .from('businesses')        .select('*')        .limit(10);      if (!businessError && businessData) {        setBusinesses(businessData);        console.log('Businesses loaded:', businessData.length);      }      const { data: contractData, error: contractError } = await supabase        .from('contracts')        .select('*')        .limit(10);      if (!contractError && contractData) {        setContracts(contractData);        console.log('Contracts loaded:', contractData.length);      }          } catch (err) {      console.error('Error fetching data:', err);    }  };  useEffect(() => {    fetchData();  }, []);  return (    <div className="p-6 space-y-6">      <EnvCheck />            <Card>        <CardHeader>          <CardTitle>üîç GigeBid Database Debug Panel</CardTitle>        </CardHeader>        <CardContent className="space-y-4">                    <div className="flex gap-4 flex-wrap">            <Button onClick={testConnection} disabled={loading}>              {loading ? 'Testing...' : 'Deep Connection Test'}            </Button>            <Button onClick={checkAllTables} disabled={loading}>              Check Tables            </Button>            <Button onClick={setupDatabase} disabled={loading}>              Setup Database            </Button>            <Button onClick={fetchData} disabled={loading}>              Refresh Data            </Button>          </div>          {connectionStatus && (            <Alert>              <AlertDescription>                <div>                  <strong>Connection Status:</strong> {connectionStatus.success ? '‚úÖ Connected' : '‚ùå Failed'}                </div>                {connectionStatus.message && (                  <div className="mt-1 text-green-600">{connectionStatus.message}</div>                )}                {connectionStatus.error && (                  <div className="mt-2">                    <strong>Error:</strong> {connectionStatus.error}                  </div>                )}                {connectionStatus.details && (                  <details className="mt-2">                    <summary>Debug Details</summary>                    <pre className="mt-2 text-xs bg-gray-100 p-2 rounded">                      {JSON.stringify(connectionStatus.details, null, 2)}                    </pre>                  </details>                )}              </AlertDescription>            </Alert>          )}          {debugInfo && (            <Alert>              <AlertDescription>                <div>                  <strong>Setup Status:</strong> {debugInfo.success ? '‚úÖ Success' : '‚ùå Failed'}                </div>                {debugInfo.message && <div className="mt-1">{debugInfo.message}</div>}                {debugInfo.error && <div className="mt-1 text-red-600">{debugInfo.error}</div>}                {debugInfo.suggestion && <div className="mt-1 text-blue-600">{debugInfo.suggestion}</div>}              </AlertDescription>            </Alert>          )}          {tableStatus && (            <div>              <h4 className="font-medium mb-2">Table Status:</h4>              <pre className="bg-gray-100 p-2 rounded text-sm overflow-auto">                {JSON.stringify(tableStatus, null, 2)}              </pre>            </div>          )}          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">            <Card>              <CardHeader>                <CardTitle>Businesses ({businesses.length})</CardTitle>              </CardHeader>              <CardContent>                {businesses.length > 0 ? (                  <div className="space-y-2">                    {businesses.slice(0, 3).map((biz) => (                      <div key={biz.id} className="p-2 bg-blue-50 rounded">                        <div className="font-medium">{biz.name}</div>                        <div className="text-sm text-gray-600">                          Owner: {biz.owner_name} | {biz.location}                        </div>                        <div className="text-xs text-gray-500">                          Skills: {Array.isArray(biz.skills) ? biz.skills.join(', ') : 'N/A'}                        </div>                      </div>                    ))}                  </div>                ) : (                  <div className="text-gray-500">No businesses found</div>                )}              </CardContent>            </Card>            <Card>              <CardHeader>                <CardTitle>Contracts ({contracts.length})</CardTitle>              </CardHeader>              <CardContent>                {contracts.length > 0 ? (                  <div className="space-y-2">                    {contracts.slice(0, 3).map((contract) => (                      <div key={contract.id} className="p-2 bg-green-50 rounded">                        <div className="font-medium">{contract.title}</div>                        <div className="text-sm text-gray-600">                          Budget: KES {contract.budget?.toLocaleString()}                        </div>                        <div className="text-xs text-gray-500">                          Skills: {Array.isArray(contract.required_skills) ? contract.required_skills.join(', ') : 'N/A'}                        </div>                      </div>                    ))}                  </div>                ) : (                  <div className="text-gray-500">No contracts found</div>                )}              </CardContent>            </Card>          </div>        </CardContent>      </Card>    </div>  );};export default DatabaseDebug;